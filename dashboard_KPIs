#output the experiments KPIs results for each experiment, by reading in the current session level data in the production and sourcing the analyze_exp.R file
source("~/analyze_exp.R")
options(java.parameters = "-Xmx488g")
library(dplyr)
library(data.table)
library(tictoc)
library(rJava)
library(foreach)
library(tidyverse)
library(nordyr)

#download Amazon Redshift
#download.file('https://s3.amazonaws.com/redshift-downloads/drivers/RedshiftJDBC42-1.2.10.1009.jar','RedshiftJDBC42-1.2.10.1009.jar', mode="wb");
#connect to Amazon Redshift
driver <- RJDBC::JDBC("com.amazon.redshift.jdbc42.Driver", "RedshiftJDBC42-1.2.10.1009.jar", identifier.quote="`")
url <- "jdbc:redshift://ds-redshift-psbx-dsa.cblrlw3ocr3v.us-west-2.redshift.amazonaws.com:5439/cust_analytics_prd?user=ck2r&password=tP011720180550_8192_CK2R"
con <- RJDBC::dbConnect(driver, url)

# current session level data in the production
# load experiments information into R based on counts of each namespace
sqlcode <- "select count(*) as size_count, namespace
from  bi_prd.experiment_data 
group by namespace
order by size_count"

# find all the namespace and its start date
experiment_information <- sqlcode %>% RJDBC::dbGetQuery(conn = con)
print(experiment_information)
print(sum(experiment_information$size_count))

# only evaluate the experiments which have more than 10,000 rows in the table
min_evaluation_size <- 10000
k_evaluate_start <- min(which(experiment_information$size_count >= min_evaluation_size))
print(k_evaluate_start)

# find out all namespaces
namespace_list <- experiment_information$namespace
k <- length(namespace_list)
print(k)

# initialize the output result 
res <- data.frame(namespace = character(), 
                  analysis_timestamp = as.Date(character()),
                  parameter_value = character(),
                  outcome = character(),
                  estimate = double(),
                  relative_change = double(),
                  p_value = double(), 
                  significance = character(),
                  n_UDV = integer(),
                  n_session = integer())


tic("total")

# apply over all the namespaces
res <- lapply(namespace_list, analyze_exp) %>%
      bind_rows()

toc()

print(res)

write.csv(res, "res.csv")

#push experiment results to redshift
redshift_send(dataframe = res,
              schema.tablename = 'bi_usr.tto_experiment_results_ls',
              con = con,
              overwrite = FALSE)

#close connection
RJDBC::dbDisconnect(con)
rm(con)
gc()
