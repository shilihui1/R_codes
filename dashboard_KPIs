# output the experiments KPIs results for each experiment, by reading in bi_prd.experiment_data and sourcing the analyze_exp.R file
source("~/analyze_exp.R")
options(java.parameters = "-Xmx488g")
require(dplyr)
require(rJava)
require(foreach)
require(tidyverse)
require(nordyr)

# download Amazon Redshift
# download.file('https://s3.amazonaws.com/redshift-downloads/drivers/RedshiftJDBC42-1.2.10.1009.jar','RedshiftJDBC42-1.2.10.1009.jar', mode="wb");
# connect to Amazon Redshift
driver <- RJDBC::JDBC("com.amazon.redshift.jdbc42.Driver", "RedshiftJDBC42-1.2.10.1009.jar", identifier.quote="`")
url <- "jdbc:redshift://ds-redshift-psbx-dsa.cblrlw3ocr3v.us-west-2.redshift.amazonaws.com:5439/cust_analytics_prd?user=ck2r&password=tP011720180550_8192_CK2R"
con <- RJDBC::dbConnect(driver, url)

# currently we have session level data in the production, will be changed to UDV level data later
# load experiments information into R based on counts of the smallest arm for each namespace
sqlcode <- "select min(size_count) as min_size_count, namespace
from
(
select count(*) as size_count, namespace, parameter_value
from bi_prd.experiment_data 
group by namespace, parameter_value
order by size_count
)
group by namespace
order by min_size_count"

# find all the namespace and its smallest arm counts
experiment_information <- sqlcode %>% RJDBC::dbGetQuery(conn = con)

# close connection
RJDBC::dbDisconnect(con)
rm(con)

# only evaluate the experiments whose smallest arm is more than 35,000 rows in the table
min_evaluation_size <- 35000
k_evaluate_start <- min(which(experiment_information$min_size_count >= min_evaluation_size))

# find out all namespaces that are qualified to be analyzed
namespace_list <- experiment_information$namespace[k_evaluate_start:nrow(experiment_information)]

# initialize the output result 
res <- data.frame(namespace = character(), 
                  analysis_timestamp = as.Date(character()),
                  parameter_value = character(),
                  outcome = character(),
                  estimate = double(),
                  relative_change = double(),
                  p_value = double(), 
                  significance = character(),
                  n_UDV = integer())

# apply over all the namespaces and combine the results
res <- lapply(namespace_list, analyze_exp) %>%
       bind_rows()

# push experiment results to redshift
con <- RJDBC::dbConnect(driver, url)

redshift_send(dataframe = res,
              schema.tablename = 'bi_usr.tto_experiment_results_ls',
              con = con,
              overwrite = FALSE)

gc()
